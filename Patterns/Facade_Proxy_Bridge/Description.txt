Завдання:
Для ігрового рушія необхідно додати наступні функції:
- доадти можливість створювати білди для різних платформ. Дана функція повина бути адаптивна до змін платформ, для яких створюються білди.
- під час створення білдів, передбачити опцію завантаження ресурсів перед початком процесу білдингу.
- додати зручниний програмний інтерфейс (API) до існуючої системи аніматор.
- для API підсистеми анімацій, додати можливість створення візуальних ефектів після програвання анімації
- додати можливість динамічно надавати системі частинок нові ефекти
- додати опціональну можливість для виклику логів по закінченню програвання анімацій
- для бібліотеки робити з фізикою, небхдіно адаптувати методи, які імітують поштовх об'єкту

Для створення білдів для різних платформ, використати паттерн проектування Міст. Це дозволить створювати білді для різних платформ,
за необхдіності додавати нові платформи.

Для опції створення ресурсів використати паттерн проектування Замісник, який дозволить доповнювати існуючу логіку без зміни основного коду

Для роботи з підсистемою анімацій викорситати паттерн Фасад, який дозволить отримати власний обробник анімацій

Для підсистеми частинок викорстати паттерн проектування Декоратор, який дозволить динамічно змінювати візуальні ефекти та недавати їм нові властивості'

Для роботи з бібліоткею симуляції фізики, використати паттерн проектування Адаптер, який дозволить адаптувати існуючі методи в бібліотеці під власні потреби

1. Додати підсистему створення білдів в залежності від обраної платформи з використанням шаблону Міст
  - додати інтерфейс IPlatform з методом Build()
  - додати класи IOSPlatform та AndroidPlatform, які реалізовуть інтерфейс IPlatform
  - додати клас TargetPlatformBuilder, який місить поле IPlatform та метод віртуальний метод Build()
  - додати підклас TargetPlatformBuilderWithResources до TargetPlatformBuilder,
  в якому передбачити завчасне створення ресурсів перед виклоиом базового методу Build()
2. Для аніматора, створити програмний інтерфейс для програвання анімацій гравця. Для цього застосувати шаблон Фасад
  - додати інтерфейс IPlayerAnimator з методами Move() та Heal()
  - додати клас PlayerAnimatorFacade, який реалізовує інтерфейс IPlayerAnimator
  - в класі PlayerAnimatorFacade додати поле Animator та з його допомогою викликати необхідні анімації в методах Move() та Heal()
3. Для програвання візуальних ефектів після анімації, створити підсистему з використанням шаблону Замісник
  - додати клас, який отримує посилання на IPlayerAnimation та який реалізовує інтерфейс IPlayerAnimation
  - після програвання анімацій Move та Heal, відображати візуальні ефекти
4. Для візуальних ефектів частинок:
 - створити базовий клас Decorator, та похідні класи ColorDecorator, SizeDecorator з методом ApplyVisualEffect()
 - в залежності від дій користувача, передбачити додавання відповідних візуальних ефектів
5. Для роботи з бібліотекою по симуляції фізики
 - додати клас ForceSimulationBehaviourAdapter, який має поле ForceSimulationBehaviour, та здійснює виклид методу AddForce